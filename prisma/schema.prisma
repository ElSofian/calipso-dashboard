generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model employees {
  id                                  Int                      @id @default(autoincrement())
  company_id                          Int
  user_id                             String                   @db.VarChar(21)
  character_id                        Int                      @default(0)
  first_name                          String                   @db.VarChar(200)
  last_name                           String                   @db.VarChar(200)
  birth_date                          String?                  @db.VarChar(10)
  grade                               String                   @db.VarChar(200)
  in_service                          Boolean                  @default(false)
  phone                               String                   @db.VarChar(200)
  iban                                String                   @db.VarChar(200)
  eotw_count                          Int                      @default(0)
  started_service                     DateTime?                @db.DateTime(0)
  time_in_service                     Int                      @default(0)
  User                                User[]
  bills                               bills[]
  companies_companies_eotwToemployees companies[]              @relation("companies_eotwToemployees")
  companies                           companies                @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "employees_company_id")
  grades                              grades                   @relation(fields: [grade], references: [name], onDelete: Cascade, map: "employees_ibfk_1")
  employees_specialities              employees_specialities[]
  exports                             exports[]
  garage                              garage[]
  notifications_reads                 notifications_reads[]
  runs                                runs[]

  @@index([grade], map: "grade")
  @@index([character_id], map: "character_id")
  @@index([company_id], map: "employees_company_id")
}

model employees_specialities {
  id           Int           @id @default(autoincrement())
  employee_id  Int
  speciality   String?       @db.VarChar(50)
  employees    employees     @relation(fields: [employee_id], references: [id], onDelete: Cascade, map: "employees_specialities_ibfk_1")
  specialities specialities? @relation(fields: [speciality], references: [name], onDelete: Cascade, map: "employees_specialities_ibfk_2")

  @@index([employee_id], map: "employee_id")
  @@index([speciality], map: "speciality")
}

model grades {
  id                 Int                  @id @default(autoincrement())
  company_id         Int
  ingame_id          Int?
  name               String               @unique(map: "name_2") @db.VarChar(50)
  salary             Int
  employees          employees[]
  companies          companies            @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "grades_company_id")
  grades_permissions grades_permissions[]

  @@index([name], map: "name")
  @@index([company_id], map: "grades_company_id")
}

model pumps {
  id            Int             @id @default(autoincrement())
  company_id    Int
  ingame_id     Int?
  label         String          @unique(map: "label_2") @db.VarChar(25)
  price         Float           @db.Float
  fuel          Int             @default(0)
  limit         Int             @default(0)
  alert_amount  Int             @default(0)
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  companies     companies       @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "pumps_company_id")
  pumps_incomes pumps_incomes[]
  runs          runs[]

  @@index([label], map: "label")
  @@index([company_id], map: "pumps_company_id")
}

model specialities {
  id                     Int                      @id @default(autoincrement())
  company_id             Int
  name                   String                   @unique(map: "name_2") @db.VarChar(50)
  employees_specialities employees_specialities[]
  companies              companies                @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "specialities_company_id")

  @@index([name], map: "name")
  @@index([company_id], map: "specialities_company_id")
}

model runs {
  id          Int       @id @default(autoincrement())
  company_id  Int
  employee_id Int
  pump        String    @db.VarChar(25)
  amount      Int
  date        DateTime  @default(now()) @db.DateTime(0)
  companies   companies @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "runs_company_id")
  employees   employees @relation(fields: [employee_id], references: [id], onDelete: Cascade, map: "runs_ibfk_1")
  pumps       pumps     @relation(fields: [pump], references: [label], onDelete: Cascade, map: "runs_ibfk_2")

  @@index([employee_id], map: "employee_id")
  @@index([pump], map: "pump")
  @@index([company_id], map: "runs_company_id")
}

model stock {
  id               Int              @id @default(autoincrement())
  company_id       Int
  item_id          Int?
  name             String           @db.VarChar(100)
  category         String           @db.VarChar(100)
  price            Int              @default(0)
  cost             Int              @default(0)
  amount_in        Int              @default(0)
  amount_ext       Int              @default(0)
  target           Int              @default(0)
  promotion        Int              @default(0)
  companies        companies        @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "stock_company_id")
  stock_categories stock_categories @relation(fields: [category], references: [name], onDelete: Cascade, map: "stock_ibfk_1")

  @@index([category], map: "category")
  @@index([company_id], map: "stock_company_id")
}

model stock_categories {
  id         Int       @id @default(autoincrement())
  company_id Int
  name       String    @unique(map: "name_2") @db.VarChar(100)
  stock      stock[]
  companies  companies @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "stock_categories_company_id")

  @@index([name], map: "name")
  @@index([company_id], map: "stock_categories_company_id")
}

model User {
  id                  String    @id @default(cuid())
  active_employee_id  Int
  username            String    @unique
  hashedPassword      String
  discord_avatar_hash String?   @db.VarChar(200)
  discord_user_id     String?   @unique @db.VarChar(21)
  sessions            Session[]
  employees           employees @relation(fields: [active_employee_id], references: [id], map: "User_active_employee_id")

  @@index([active_employee_id], map: "User_active_employee_id")
  @@map("User")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("Session")
}

model bills {
  id                  Int        @id @default(autoincrement())
  company_id          Int
  employee_id         Int?
  client_name         String     @db.VarChar(150)
  client_character_id Int
  reason              String     @db.VarChar(1000)
  amount              Int
  bill_id             Int
  is_paid             Boolean
  date                DateTime   @default(now()) @db.DateTime(0)
  companies           companies  @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "bills_company_id")
  employees           employees? @relation(fields: [employee_id], references: [id], map: "bills_employee_id")

  @@index([employee_id], map: "bills_employee_id")
  @@index([company_id], map: "bills_company_id")
}

model garage {
  id          Int        @id @default(autoincrement())
  company_id  Int
  vehicle_id  Int        @unique(map: "vehicle_id")
  employee_id Int?
  plate       String     @db.VarChar(50)
  model       String     @db.VarChar(50)
  created_at  DateTime   @default(now()) @db.DateTime(0)
  companies   companies  @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "garage_company_id")
  employees   employees? @relation(fields: [employee_id], references: [id], map: "garage_employee_id")

  @@index([employee_id], map: "garage_character_id")
  @@index([company_id], map: "garage_company_id")
}

model payments {
  id         Int       @id @default(autoincrement())
  company_id Int
  amount     Int
  reason     String    @db.VarChar(1000)
  date       DateTime  @default(now()) @db.DateTime(0)
  companies  companies @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "payments_company_id")

  @@index([company_id], map: "payments_company_id")
}

model exports {
  id          Int        @id @default(autoincrement())
  company_id  Int
  employee_id Int?
  amount      Int
  date        DateTime   @default(now()) @db.DateTime(0)
  companies   companies  @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "exports_company_id")
  employees   employees? @relation(fields: [employee_id], references: [id], map: "exports_employee_id")

  @@index([employee_id], map: "exports_employee_id")
  @@index([company_id], map: "exports_company_id")
}

model pumps_incomes {
  id      Int      @id @default(autoincrement())
  pump_id Int
  amount  Int
  date    DateTime @default(now()) @db.DateTime(0)
  pumps   pumps    @relation(fields: [pump_id], references: [id], map: "pumps_incomes.pump_id")

  @@index([pump_id], map: "pumps_incomes.pump_id")
}

model companies {
  id                                  Int                @id @default(autoincrement())
  name                                String             @db.VarChar(100)
  type                                String             @db.VarChar(50)
  logo                                String?            @db.VarChar(5000)
  eotw                                Int?
  created_at                          DateTime           @default(now()) @db.DateTime(0)
  bills                               bills[]
  employees_companies_eotwToemployees employees?         @relation("companies_eotwToemployees", fields: [eotw], references: [id], map: "companies_eotw")
  companies_types                     companies_types    @relation(fields: [type], references: [name], map: "companies_type")
  employees                           employees[]
  events                              events[]
  exports                             exports[]
  garage                              garage[]
  grades                              grades[]
  notifications                       notifications[]
  payments                            payments[]
  pumps                               pumps[]
  runs                                runs[]
  specialities                        specialities[]
  stock                               stock[]
  stock_categories                    stock_categories[]

  @@index([type], map: "companies_type")
  @@index([eotw], map: "companies_eotw")
}

model companies_types {
  id        Int         @id @default(autoincrement())
  name      String      @unique(map: "name_2") @db.VarChar(50)
  companies companies[]

  @@index([name], map: "name")
}

model events {
  id          Int       @id @default(autoincrement())
  company_id  Int
  title       String    @db.VarChar(100)
  description String    @db.VarChar(250)
  location    String    @db.VarChar(100)
  start       DateTime  @db.DateTime(0)
  end         DateTime  @db.DateTime(0)
  start_time  DateTime  @db.DateTime(0)
  end_time    DateTime  @db.DateTime(0)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  companies   companies @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "events_company_id")

  @@index([company_id], map: "events_company_id")
}

model grades_permissions {
  id          Int         @id @default(autoincrement())
  grade_id    Int
  permission  Int
  grades      grades      @relation(fields: [grade_id], references: [id], onDelete: Cascade, map: "grades_permissions_grade_id")
  permissions permissions @relation(fields: [permission], references: [id], onDelete: Cascade, map: "grades_permissions_permission")

  @@index([grade_id], map: "grades_permissions_grade_id")
  @@index([permission], map: "grades_permissions_permission")
}

model permissions {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique(map: "name") @db.VarChar(50)
  grades_permissions grades_permissions[]

  @@index([name], map: "name_2")
}

model notifications {
  id                  Int                   @id @default(autoincrement())
  company_id          Int
  title               String                @db.VarChar(50)
  message             String                @db.VarChar(350)
  date                DateTime              @default(now()) @db.DateTime(0)
  companies           companies             @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "notifications_company_id")
  notifications_reads notifications_reads[]

  @@index([company_id], map: "notifications_company_id")
}

model pawnshop_buyback_items {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(100)
  price Int
}

model notifications_reads {
  id              Int           @id @default(autoincrement())
  notification_id Int
  employee_id     Int
  readed          Boolean       @default(false)
  employees       employees     @relation(fields: [employee_id], references: [id], onDelete: Cascade, map: "notifications_reads.employee_id")
  notifications   notifications @relation(fields: [notification_id], references: [id], onDelete: Cascade, map: "notifications_reads.notification_id")

  @@index([employee_id], map: "notifications_reads.employee_id")
  @@index([notification_id], map: "notifications_reads.notification_id")
}
